--- a/drivers/input/input.c	2024-10-20 06:37:57.679921683 +0100
+++ b/drivers/input/input.c	2024-10-20 07:26:13.957022906 +0100
@@ -377,11 +377,16 @@
 	return disposition;
 }
 
+/* Manual KernelSU handle additon */
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
 	int disposition = input_get_disposition(dev, type, code, &value);
 
+	ksu_handle_input_handle_event(&type, &code, &value);
+
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
 
--- a/fs/exec.c	2024-10-20 06:38:00.423253820 +0100
+++ b/fs/exec.c	2024-10-20 07:27:08.460617160 +0100
@@ -2004,6 +2004,10 @@
 /*
  * sys_execve() executes a new program.
  */
+
+/* Manual KernelSU handle addition */
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv, void *envp, int *flags);
+
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
@@ -2015,6 +2019,8 @@
 	struct files_struct *displaced;
 	int retval;
 
+	ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+
 	if (IS_ERR(filename))
 		return PTR_ERR(filename);
 
--- a/fs/open.c	2024-10-20 06:38:00.553253764 +0100
+++ b/fs/open.c	2024-10-20 07:27:42.190766987 +0100
@@ -358,6 +358,10 @@
 	return error;
 }
 
+
+/* Manual KernelSU handle addition */
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode, int *flags);
+
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -373,6 +377,8 @@
 	int res;
 	unsigned int lookup_flags = LOOKUP_FOLLOW;
 
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
+
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
--- a/fs/read_write.c	2024-10-20 06:38:00.566587091 +0100
+++ b/fs/read_write.c	2024-10-20 07:28:07.087538938 +0100
@@ -437,6 +437,9 @@
 }
 EXPORT_SYMBOL(kernel_read);
 
+/* Manual KernelSU handle addition */
+extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr, size_t *count_ptr, loff_t **pos);
+
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
--- a/fs/stat.c	2024-10-20 06:38:00.579920419 +0100
+++ b/fs/stat.c	2024-10-20 07:29:03.091093822 +0100
@@ -148,6 +148,9 @@
 }
 EXPORT_SYMBOL(vfs_statx_fd);
 
+/* Manual KernelSU handle addition */
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -170,6 +173,8 @@
 	int error = -EINVAL;
 	unsigned int lookup_flags = LOOKUP_FOLLOW | LOOKUP_AUTOMOUNT;
 
+	ksu_handle_stat(&dfd, &filename, &flags);
+
 	if ((flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT |
 		       AT_EMPTY_PATH | KSTAT_QUERY_FLAGS)) != 0)
 		return -EINVAL;
